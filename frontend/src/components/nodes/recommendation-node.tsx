"use client";

import { Handle, Node, NodeProps, Position } from "@xyflow/react";
import { useEffect, useState } from "react";
import { Card, CardContent } from "../ui/card";
import { Input } from "../ui/input";
import { Button } from "../ui/button";
import { experimental_useObject as useObject } from "@ai-sdk/react";
import { nodeSchema } from "@/types/schema";
import { generateId } from "ai";
import useStore from "@/store/node-store";
import { AppNode } from "@/store/types";
import { Edge } from "@xyflow/react";
// made to display code generated by ChatGPT.

export type RecommendationNode = Node<{
  context: string;
  recommendation: string;
  alternatives: string;
  reasoning: string;
}>;

export function RecommendationNode({
  id,
  data,
  isConnectable,
}: NodeProps<RecommendationNode>) {
  //   const [prompt, setPrompt] = useState(data.explanation);
  //   const [option, setOption] = useState("");
  //   code comes in from ChatGPT
  const [context, setContext] = useState(data.context);
  const [recommendation, setRecommendation] = useState(data.recommendation);
  const [alternatives, setAlternatives] = useState(data.alternatives);
  const [reasoning, setReasoning] = useState(data.reasoning);

  //   if <code> doesn't do well with streaming data, could use loading screen while code completes.
  //   const [loading, setLoading] = useState(true);
  const { nodes, edges, setNodes, setEdges } = useStore();
  const { submit, isLoading, error, object } = useObject({
    id,
    api: "/api/ai",
    schema: nodeSchema,
    onFinish: ({ object }) => {
      console.log(object);
      const newNodes: AppNode[] = [];
      const newEdges: Edge[] = [];
      if (object?.nodes.length) {
        object.nodes.forEach((node) => {
          const newNodeId = generateId();
          const newNode = {
            id: newNodeId,
            type: node.type,
            data: node.data,
            position: { x: 0, y: 0 },
          };
          const newEdge = {
            id: `${id}-${newNodeId}`,
            source: id,
            target: newNodeId,
          };
          newNodes.push(newNode);
          newEdges.push(newEdge);
        });
      }
      setNodes([...nodes, ...newNodes]);
      setEdges([...edges, ...newEdges]);
    },
  });
  //   const handleSubmit = () => {
  // setCode(code);
  // submit({ prompt });
  //   };
  return (
    <Card className="w-[300px]">
      <CardContent className="flex flex-col gap-2 p-2">
        <h3>Context</h3>
        <p>{context}</p>
        <h3>Reasoning</h3>
        <p>{reasoning}</p>
        <h3>Recommendation</h3>
        <p>{recommendation}</p>
        <h3>Alternatives</h3>
        <p>{alternatives}</p>
      </CardContent>
      <Handle type="target" position={Position.Top} isConnectable={false} />
      <Handle type="source" position={Position.Bottom} isConnectable={false} />
    </Card>
  );
}
